<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UltimateStore - Your Files</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <link href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css" rel="stylesheet"/>
    <style>
        .gradient-text {
            background: linear-gradient(45deg, #3b82f6, #60a5fa);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .gradient-bg {
            background: linear-gradient(135deg, #1e2936 0%, #0f172a 100%);
        }
        .glass-effect {
            background: rgba(30, 41, 59, 0.7);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
        }
        .hover-scale {
            transition: transform 0.2s ease-in-out;
        }
        .hover-scale:hover {
            transform: scale(1.02);
        }
        .file-card {
            transition: all 0.3s ease;
            border: 1px solid rgba(59, 130, 246, 0.1);
        }
        .file-card:hover {
            border-color: rgba(59, 130, 246, 0.5);
            box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
        }
        @keyframes slideIn {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        .animate-slide-in {
            animation: slideIn 0.5s ease-out forwards;
        }
        .stats-card {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(37, 99, 235, 0.1) 100%);
            border: 1px solid rgba(59, 130, 246, 0.2);
        }
        .sidebar-link {
            padding: 0.75rem;
            border-radius: 1rem;
            transition: all 0.2s ease;
            border: 1px solid transparent;
        }
        .sidebar-link:hover {
            background: rgba(59, 130, 246, 0.1);
            border-color: rgba(59, 130, 246, 0.2);
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .animate-fade-in {
            animation: fadeIn 0.3s ease-out forwards;
        }
        .menu-open {
            transform: translateX(0) !important;
        }
    </style>
</head>
<body class="gradient-bg min-h-screen text-white">
    <!-- Navigation -->
    <nav class="fixed top-0 z-50 w-full glass-effect border-b border-blue-500/10">
        <div class="px-4 py-3 lg:px-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center justify-start">
                    <button type="button" class="inline-flex items-center p-2 text-sm text-blue-400 rounded-lg sm:hidden hover:bg-blue-500/10 focus:outline-none">
                        <i class="ri-menu-line text-xl"></i>
                    </button>
                    <a href="/home" class="flex ml-2 md:mr-24 items-center hover-scale">
                        <div class="w-10 h-10 flex items-center justify-center bg-blue-500 rounded-xl mr-3">
                            <i class="ri-cloud-fill text-2xl text-white"></i>
                        </div>
                        <div>
                            <span class="block text-xl font-bold gradient-text">UltimateStore</span>
                            <span class="text-xs text-blue-400">Cloud Storage</span>
                        </div>
                    </a>
                </div>
                <div class="flex items-center gap-4">
                    
                    <div class="flex items-center">
                        <button type="button" class="flex items-center justify-center w-10 h-10 rounded-xl bg-blue-500/10 hover:bg-blue-500/20 transition-all cursor-pointer">
                            <i class="ri-user-fill text-xl text-blue-400"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- Sidebar -->
    <aside class="fixed top-0 left-0 z-40 w-64 h-screen pt-20 transition-transform -translate-x-full bg-white border-r border-gray-200 sm:translate-x-0 dark:bg-gray-800 dark:border-gray-700">
        <div class="h-full px-3 pb-4 overflow-y-auto bg-white dark:bg-gray-800">
            <ul class="space-y-2 font-medium">
                <li>
                    <a href="/home" class="flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group">
                        <i class="ri-folder-line text-xl text-gray-500 dark:text-gray-400"></i>
                        <span class="ml-3">My Files</span>
                    </a>
                </li>
                <li>
                    <button onclick="showPopUp()" class="flex items-center w-full p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group cursor-pointer">
                        <i class="ri-upload-cloud-line text-xl text-gray-500 dark:text-gray-400"></i>
                        <span class="ml-3">Upload New File</span>
                    </button>
                </li>
            </ul>
        </div>
    </aside>

    <!-- Main content -->
    <main class="p-4 sm:ml-64 pt-20">
        <div class="p-4 rounded-xl mt-2 animate-slide-in">
            <!-- Stats cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                <div class="stats-card rounded-xl p-6 cursor-pointer">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-blue-400">Total Files</p>
                            <p class="text-3xl font-bold text-white mt-1"><%= files.length %></p>
                        </div>
                        <div class="w-12 h-12 flex items-center justify-center bg-blue-500/20 rounded-xl">
                            <i class="ri-file-list-line text-2xl text-blue-400"></i>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Search -->
            <div class="glass-effect rounded-xl p-4 mb-6">
                <form action="/home" method="GET" class="flex items-center">
                    <div class="relative flex-1">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="ri-search-line text-blue-400"></i>
                        </div>
                        <input 
                            type="text" 
                            name="search" 
                            value="<%= search %>"
                            placeholder="Search your files..." 
                            class="w-full bg-blue-500/10 border border-blue-500/20 rounded-lg pl-10 pr-4 py-2 text-white text-sm focus:outline-none focus:border-blue-500/50"
                        >
                    </div>
                    <button type="submit" class="hidden">Search</button>
                </form>
            </div>

            <!-- Upload button for mobile -->
            <div class="sm:hidden mb-6">
                <button onclick="showPopUp()" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-5 rounded-xl text-sm transition-all">
                    <i class="ri-upload-cloud-line mr-2"></i>
                    Upload New File
                </button>
            </div>

            <!-- Files grid -->
            <div class="glass-effect rounded-xl p-6">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-bold text-white">Your Files</h2>
                    <div class="text-sm text-blue-400">
                        <% if (files.length > 0) { %>
                            <%= files.length %> file<%= files.length === 1 ? '' : 's' %>
                        <% } %>
                    </div>
                </div>
                
                <% if (files.length === 0) { %>
                    <div class="text-center py-12">
                        <div class="w-16 h-16 mx-auto mb-4 rounded-full bg-blue-500/10 flex items-center justify-center">
                            <i class="ri-file-add-line text-3xl text-blue-400"></i>
                        </div>
                        <p class="text-lg font-medium text-white mb-2">No files yet</p>
                        <p class="text-sm text-blue-400 mb-6">Upload your first file to get started</p>
                        <button onclick="showPopUp()" class="inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-600 rounded-lg transition-all">
                            <i class="ri-upload-cloud-line mr-2"></i>
                            Upload File
                        </button>
                    </div>
                <% } else { %>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 cursor-pointer">
                        <% files.forEach((file) => { %>
                            <div class="file-card glass-effect rounded-xl p-4 group animate-slide-in">
                                <div class="flex items-center mb-3">
                                    <div class="w-10 h-10 mr-3 rounded-lg bg-blue-500/10 flex items-center justify-center">
                                        <i class="ri-file-text-line text-xl text-blue-400"></i>
                                    </div>
                                    <div class="overflow-hidden flex-1">
                                        <div class="flex items-center gap-2">
                                            <p class="text-sm font-medium text-white truncate flex-1" id="filename-display-<%= file._id %>" title="<%= file.customName && file.customName.trim() ? file.customName : file.originalname %>">
                                                <%= file.customName && file.customName.trim() ? file.customName : file.originalname %>
                                            </p>
                                            <button onclick="startEditFileName('<%= file._id %>')" class="text-blue-400 hover:text-blue-300 opacity-0 group-hover:opacity-100 transition-opacity text-xs cursor-pointer" title="Edit file name">
                                                <i class="ri-edit-2-line"></i>
                                            </button>
                                        </div>
                                        <!-- Hidden edit input -->
                                        <div id="filename-edit-<%= file._id %>" class="hidden mt-2 flex gap-2 items-center">
                                            <input type="text" id="edit-input-<%= file._id %>" class="flex-1 min-w-0 bg-blue-500/10 border border-blue-500/20 rounded px-2 py-1 text-white text-sm focus:outline-none focus:border-blue-500/50" 
                                                   value="<%= file.customName && file.customName.trim() ? file.customName : file.originalname %>">
                                            <!-- Save (check) button: larger on mobile, slightly smaller on md+ -->
                                            <button onclick="saveFileName('<%= file._id %>')" aria-label="Save filename" title="Save" class="w-10 h-10 md:w-9 md:h-9 bg-blue-500 hover:bg-blue-600 text-white rounded-lg flex items-center justify-center transition-all shadow-sm cursor-pointer flex-shrink-0">
                                                <i class="ri-check-line text-lg"></i>
                                            </button>
                                            <!-- Cancel (cross) button: larger on mobile, slightly smaller on md+ -->
                                            <button onclick="cancelEditFileName('<%= file._id %>')" aria-label="Cancel edit" title="Cancel" class="w-10 h-10 md:w-9 md:h-9 bg-red-500 hover:bg-red-600 text-white rounded-lg flex items-center justify-center transition-all shadow-sm cursor-pointer flex-shrink-0">
                                                <i class="ri-close-line text-lg"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex items-center justify-end gap-2">
                                    <a href="/home/download/<%= file._id %>" 
                                       class="inline-flex items-center px-3 py-1.5 bg-blue-500/10 hover:bg-blue-500/20 text-blue-400 rounded-lg text-sm transition-all" 
                                       download="<%= file.originalname %>"
                                       onclick="event.preventDefault(); downloadFile(this.href, '<%= file.originalname %>')">
                                        <i class="ri-download-line mr-1"></i>
                                        Download
                                    </a>
                                    <button type="button" class="inline-flex items-center px-3 py-1.5 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm transition-all delete-file-btn cursor-pointer" data-id="<%= file._id %>">
                                        <i class="ri-delete-bin-2-line mr-1"></i>
                                        Delete
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                <% } %>
            </div>
        </div>
    </main>

    <!-- Upload Modal -->
    <div class="pop hidden backdrop-blur-sm fixed top-0 left-0 right-0 z-50 w-full p-4 h-full bg-black/20 flex items-center justify-center">
        <div class="glass-effect rounded-xl w-full max-w-xl animate-slide-in">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-6 border-b border-blue-500/10">
                <div>
                    <h3 class="text-xl font-bold text-white">
                        Upload File
                    </h3>
                    <p class="text-sm text-blue-400 mt-1">Add your files to the cloud</p>
                </div>
                <button onclick="hidePopUp()" class="text-blue-400 hover:text-blue-300 rounded-lg p-2 hover:bg-blue-500/10 transition-all">
                    <i class="ri-close-line text-2xl"></i>
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6">
                <form action="/home/upload" method="post" enctype="multipart/form-data" class="space-y-6">
                    <div class="flex items-center justify-center w-full">
                        <label for="dropzone-file" class="flex flex-col items-center justify-center w-full h-64 border-2 border-blue-500/20 border-dashed rounded-xl cursor-pointer hover:border-blue-500/40 hover:bg-blue-500/5 transition-all">
                            <div class="flex flex-col items-center justify-center pt-5 pb-6">
                                <div class="w-16 h-16 mb-4 rounded-xl bg-blue-500/10 flex items-center justify-center">
                                    <i class="ri-upload-cloud-2-line text-3xl text-blue-400"></i>
                                </div>
                                <p class="mb-2 text-sm text-white"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                                <p class="text-xs text-blue-400">Supported formats: PNG, JPG, JPEG, PDF, DOC, DOCX, XLS, XLSX, TXT</p>
                                <p id="file-error" class="text-xs text-red-400 mt-2 hidden">This file type is not supported</p>
                            </div>
                            <input id="dropzone-file" type="file" name="file" class="hidden" accept=".png,.jpg,.jpeg,.pdf,.doc,.docx,.xls,.xlsx,.txt" />
                        </label>
                    </div>
                    <!-- File selection confirmation -->
                    <div id="selected-files" class="mt-4"></div>
                <input type="hidden" id="custom-filename" name="customFilename" />
                    <div class="flex justify-end space-x-3">
                        <button type="button" onclick="hidePopUp()" class="px-4 py-2 rounded-lg bg-blue-500/10 hover:bg-blue-500/20 text-blue-400 transition-all text-sm">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-all text-sm disabled:opacity-50 disabled:cursor-not-allowed">
                            Upload
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Profile Modal -->
    <div class="profile-modal hidden backdrop-blur-sm fixed top-0 left-0 right-0 z-50 w-full p-4 h-full bg-black/20 flex items-center justify-center">
        <div class="glass-effect rounded-xl w-full max-w-md animate-slide-in">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-6 border-b border-blue-500/10">
                <div>
                    <h3 class="text-xl font-bold text-white">
                        User Profile
                    </h3>
                    <p class="text-sm text-blue-400 mt-1">Manage your account</p>
                </div>
                <button onclick="closeProfileModal()" class="text-blue-400 hover:text-blue-300 rounded-lg p-2 hover:bg-blue-500/10 transition-all cursor-pointer">
                    <i class="ri-close-line text-2xl"></i>
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6">
                <div class="space-y-4">
                    <div class="flex items-center space-x-4">
                        <div class="w-16 h-16 rounded-full bg-blue-500/20 flex items-center justify-center">
                            <i class="ri-user-fill text-3xl text-blue-400"></i>
                        </div>
                        <div class="flex-1">
                            <div class="flex items-center justify-between mb-2">
                                <h4 class="text-lg font-semibold text-white" id="profile-username">Loading...</h4>
                                <button onclick="toggleEditUsername()" class="text-blue-400 hover:text-blue-300 text-sm cursor-pointer">
                                    <i class="ri-edit-2-line"></i>
                                </button>
                            </div>
                            <p class="text-sm text-blue-400" id="profile-email">Loading...</p>
                            
                            <!-- Username Edit Section -->
                            <div id="username-edit-section" class="hidden mt-3 space-y-2">
                                <input type="text" id="edit-username" class="w-full bg-blue-500/10 border border-blue-500/20 rounded-lg px-3 py-2 text-white text-sm focus:outline-none focus:border-blue-500/50" placeholder="New username">
                                <div class="flex space-x-2">
                                    <button onclick="saveUsername()" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm transition-all cursor-pointer">Save</button>
                                    <button onclick="cancelEditUsername()" class="bg-blue-500/10 hover:bg-blue-500/20 text-blue-400 px-3 py-1 rounded text-sm transition-all cursor-pointer">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Password Change Section -->
                    <div class="border-t border-blue-500/10 pt-4">
                        <div class="flex items-center justify-between mb-3">
                            <h5 class="text-sm font-medium text-white">Change Password</h5>
                            <button onclick="togglePasswordChange()" class="text-blue-400 hover:text-blue-300 text-sm cursor-pointer">
                                <i class="ri-lock-line"></i>
                            </button>
                        </div>
                        
                        <div id="password-change-section" class="hidden space-y-3">
                            <input type="password" id="current-password" class="w-full bg-blue-500/10 border border-blue-500/20 rounded-lg px-3 py-2 text-white text-sm focus:outline-none focus:border-blue-500/50" placeholder="Current password">
                            <input type="password" id="new-password" class="w-full bg-blue-500/10 border border-blue-500/20 rounded-lg px-3 py-2 text-white text-sm focus:outline-none focus:border-blue-500/50" placeholder="New password">
                            <input type="password" id="confirm-password" class="w-full bg-blue-500/10 border border-blue-500/20 rounded-lg px-3 py-2 text-white text-sm focus:outline-none focus:border-blue-500/50" placeholder="Confirm new password">
                            <div class="flex space-x-2">
                                <button onclick="savePassword()" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm transition-all cursor-pointer">Update Password</button>
                                <button onclick="cancelPasswordChange()" class="bg-blue-500/10 hover:bg-blue-500/20 text-blue-400 px-3 py-1 rounded text-sm transition-all cursor-pointer">Cancel</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="border-t border-blue-500/10 pt-4">
                        <button onclick="handleLogout()" class="w-full bg-red-600 hover:bg-red-700 text-white font-medium py-3 px-5 rounded-xl text-sm transition-all flex items-center justify-center cursor-pointer">
                            <i class="ri-logout-box-line mr-2"></i>
                            Logout
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Profile modal functions
        function openProfileModal() {
            fetchUserProfile();
            document.querySelector('.profile-modal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }

        function closeProfileModal() {
            document.querySelector('.profile-modal').classList.add('hidden');
            document.body.style.overflow = 'auto';
        }

        async function fetchUserProfile() {
            try {
                const response = await fetch('/user/profile');
                const data = await response.json();
                
                if (response.ok) {
                    document.getElementById('profile-username').textContent = data.username;
                    document.getElementById('profile-email').textContent = data.email;
                } else {
                    console.error('Failed to fetch profile:', data.error);
                    document.getElementById('profile-username').textContent = 'Error loading profile';
                    document.getElementById('profile-email').textContent = 'Please try again';
                }
            } catch (error) {
                console.error('Profile fetch error:', error);
                document.getElementById('profile-username').textContent = 'Error loading profile';
                document.getElementById('profile-email').textContent = 'Please try again';
            }
        }

        async function handleLogout() {
            try {
                const response = await fetch('/user/logout', { method: 'POST' });
                const data = await response.json();
                
                if (response.ok && data.success) {
                    window.location.href = '/user/login';
                } else {
                    alert('Logout failed. Please try again.');
                }
            } catch (error) {
                console.error('Logout error:', error);
                alert('Logout failed. Please try again.');
            }
        }

        // Add click handler to user icon
        document.addEventListener('DOMContentLoaded', function() {
            const userIcon = document.querySelector('.ri-user-fill').closest('button');
            if (userIcon) {
                userIcon.addEventListener('click', openProfileModal);
            }
        });

        // Close profile modal when clicking outside
        document.querySelector('.profile-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeProfileModal();
            }
        });

        // Profile edit functions
        function toggleEditUsername() {
            const editSection = document.getElementById('username-edit-section');
            const currentUsername = document.getElementById('profile-username').textContent;
            
            if (editSection.classList.contains('hidden')) {
                document.getElementById('edit-username').value = currentUsername;
                editSection.classList.remove('hidden');
            } else {
                editSection.classList.add('hidden');
            }
        }

        function cancelEditUsername() {
            document.getElementById('username-edit-section').classList.add('hidden');
            document.getElementById('edit-username').value = '';
        }

        async function saveUsername() {
            const newUsername = document.getElementById('edit-username').value.trim();
            const currentUsername = document.getElementById('profile-username').textContent;
            const saveBtn = document.querySelector('#username-edit-section button:first-child');
            
            if (!newUsername) {
                alert('Username cannot be empty');
                return;
            }
            
            if (newUsername === currentUsername) {
                cancelEditUsername();
                return;
            }
            
            if (newUsername.length < 3) {
                alert('Username must be at least 3 characters long');
                return;
            }

            // Show loading state
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const response = await fetch('/user/profile', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username: newUsername })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    document.getElementById('profile-username').textContent = data.username;
                    cancelEditUsername();
                    alert('Username updated successfully!');
                } else {
                    alert(data.error || 'Failed to update username');
                }
            } catch (error) {
                console.error('Username update error:', error);
                alert('Failed to update username. Please try again.');
            } finally {
                // Reset loading state
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save';
            }
        }

        function togglePasswordChange() {
            const passwordSection = document.getElementById('password-change-section');
            
            if (passwordSection.classList.contains('hidden')) {
                passwordSection.classList.remove('hidden');
            } else {
                passwordSection.classList.add('hidden');
                clearPasswordFields();
            }
        }

        function cancelPasswordChange() {
            document.getElementById('password-change-section').classList.add('hidden');
            clearPasswordFields();
        }

        function clearPasswordFields() {
            document.getElementById('current-password').value = '';
            document.getElementById('new-password').value = '';
            document.getElementById('confirm-password').value = '';
        }

        async function savePassword() {
            const currentPassword = document.getElementById('current-password').value;
            const newPassword = document.getElementById('new-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;
            const saveBtn = document.querySelector('#password-change-section button:first-child');
            
            if (!currentPassword || !newPassword || !confirmPassword) {
                alert('All password fields are required');
                return;
            }
            
            if (newPassword !== confirmPassword) {
                alert('New passwords do not match');
                return;
            }
            
            if (newPassword.length < 5) {
                alert('New password must be at least 5 characters long');
                return;
            }

            // Show loading state
            saveBtn.disabled = true;
            saveBtn.textContent = 'Updating...';

            try {
                const response = await fetch('/user/profile', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        currentPassword: currentPassword,
                        newPassword: newPassword 
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    cancelPasswordChange();
                    alert('Password updated successfully!');
                } else {
                    alert(data.error || 'Failed to update password');
                }
            } catch (error) {
                console.error('Password update error:', error);
                alert('Failed to update password. Please try again.');
            } finally {
                // Reset loading state
                saveBtn.disabled = false;
                saveBtn.textContent = 'Update Password';
            }
        }

        // Add keyboard shortcuts for better UX
        document.getElementById('edit-username').addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                saveUsername();
            } else if (e.key === 'Escape') {
                cancelEditUsername();
            }
        });

        // Password fields keyboard shortcuts
        document.getElementById('confirm-password').addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                savePassword();
            } else if (e.key === 'Escape') {
                cancelPasswordChange();
            }
        });

        // Modal functions
        function showPopUp() {
            document.querySelector('.pop').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
            // Reset error message when opening modal
            document.getElementById('file-error').classList.add('hidden');
            document.getElementById('dropzone-file').value = '';
        }

        function hidePopUp() {
            document.querySelector('.pop').classList.add('hidden');
            document.body.style.overflow = 'auto';
        }

        // File validation
        const supportedTypes = [
            'image/png',
            'image/jpeg',
            'application/pdf',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'text/plain'
        ];

        document.getElementById('dropzone-file').addEventListener('change', function(e) {
            const file = e.target.files[0];
            const errorElement = document.getElementById('file-error');
            const submitButton = this.form.querySelector('button[type="submit"]');
            
                        if (file) {
                                if (!supportedTypes.includes(file.type)) {
                                        errorElement.classList.remove('hidden');
                                        submitButton.disabled = true;
                                        submitButton.classList.add('opacity-50', 'cursor-not-allowed');
                                        return;
                                }
                                // Show file confirmation with delete and update
                                const selectedFilesDiv = document.getElementById('selected-files');
                                const safeFileName = file.name.replace(/"/g, '&quot;');
                                selectedFilesDiv.innerHTML = `
                                    <div class="flex flex-col gap-2">
                                        <div class="flex items-center bg-blue-500/10 border border-blue-500/20 rounded-lg px-4 py-2">
                                            <i class='ri-file-2-line text-blue-400 text-xl mr-3'></i>
                                            <div class="flex-1 flex flex-col md:flex-row md:items-center gap-2">
                                                <span class="text-white font-medium" id="filename-display">${safeFileName}</span>
                                                <input type="text" id="filename-edit" class="hidden bg-blue-900/30 border border-blue-500/20 rounded px-2 py-1 text-white text-sm w-40" value="${safeFileName}" />
                                                <span class="text-xs text-blue-400 ml-2">${(file.size/1024).toFixed(1)} KB</span>
                                            </div>
                                            <button type="button" id="edit-filename-btn" class="ml-2 text-blue-400 hover:text-blue-200" title="Edit file name"><i class="ri-edit-2-line"></i></button>
                                            <button type="button" id="delete-file-btn" class="ml-2 text-red-400 hover:text-red-200" title="Remove file"><i class="ri-close-line"></i></button>
                                            <span class="text-xs text-blue-400 ml-2">Selected</span>
                                        </div>
                                    </div>
                                `;
                                // Set hidden input for custom filename
                                document.getElementById('custom-filename').value = file.name;
                                // Edit filename logic
                                document.getElementById('edit-filename-btn').onclick = function() {
                                    document.getElementById('filename-display').classList.add('hidden');
                                    const editInput = document.getElementById('filename-edit');
                                    editInput.classList.remove('hidden');
                                    editInput.focus();
                                    editInput.select();
                                };
                                document.getElementById('filename-edit').onblur = function() {
                                    const newName = this.value.trim() || file.name;
                                    document.getElementById('filename-display').textContent = newName;
                                    document.getElementById('filename-display').classList.remove('hidden');
                                    this.classList.add('hidden');
                                    document.getElementById('custom-filename').value = newName;
                                };
                                document.getElementById('filename-edit').onkeydown = function(e) {
                                    if (e.key === 'Enter') {
                                        e.preventDefault();
                                        this.blur();
                                    }
                                };
                                // Delete file logic
                                document.getElementById('delete-file-btn').onclick = function() {
                                    document.getElementById('dropzone-file').value = '';
                                    selectedFilesDiv.innerHTML = '';
                                    document.getElementById('custom-filename').value = '';
                                    submitButton.disabled = true;
                                    submitButton.classList.add('opacity-50', 'cursor-not-allowed');
                                };
                        }
            
            errorElement.classList.add('hidden');
            submitButton.disabled = false;
            submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
                        if (!file) {
                                document.getElementById('selected-files').innerHTML = '';
                        }
        });

        // File download function
        async function downloadFile(url, filename) {
            try {
                const response = await fetch(url);
                const blob = await response.blob();
                const downloadUrl = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = downloadUrl;
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                window.URL.revokeObjectURL(downloadUrl);
            } catch (error) {
                console.error('Download failed:', error);
                alert('Failed to download the file. Please try again.');
            }
        }

        // Close modal when clicking outside
        document.querySelector('.pop').addEventListener('click', function(e) {
            if (e.target === this) {
                hidePopUp();
            }
        });

        // Mobile menu toggle
        const menuButton = document.querySelector('button[type="button"]');
        const sidebar = document.getElementById('logo-sidebar');
        
        if (menuButton && sidebar) {
            menuButton.addEventListener('click', (e) => {
                e.stopPropagation();
                sidebar.classList.toggle('menu-open');
            });

            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!sidebar.contains(e.target) && !menuButton.contains(e.target)) {
                    sidebar.classList.remove('menu-open');
                }
            });
        }

        // Debounce search input
        let searchTimeout;
        const searchInput = document.querySelector('input[name="search"]');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    e.target.closest('form').submit();
                }, 700);
            });
        }

        // Toast container for undo notifications
        const toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        toastContainer.style.position = 'fixed';
        toastContainer.style.right = '20px';
        toastContainer.style.bottom = '20px';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);

        // Delete file buttons (soft-delete + undo)
        document.querySelectorAll('.delete-file-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const id = btn.getAttribute('data-id');
                if (!id) return;

                btn.disabled = true;

                // Soft-delete on server
                try {
                    const res = await fetch(`/home/delete/${id}`, { method: 'POST', headers: { 'Content-Type': 'application/json' } });
                    const data = await res.json();
                    if (!(res.ok && data.success)) {
                        alert(data.error || 'Delete failed');
                        btn.disabled = false;
                        return;
                    }
                } catch (err) {
                    alert('Delete failed');
                    btn.disabled = false;
                    return;
                }

                const card = btn.closest('.file-card');
                // Hide card visually but keep in DOM so we can restore if undone (or remove permanently later)
                if (card) {
                    card.style.opacity = '0.4';
                    card.style.pointerEvents = 'none';
                }

                // Create toast with Undo
                const toast = document.createElement('div');
                toast.className = 'glass-effect rounded-lg px-4 py-3 mb-3 flex items-center gap-3';
                toast.style.minWidth = '240px';
                toast.innerHTML = `
                    <div class="flex-1 text-sm text-white">File deleted</div>
                    <button class="undo-btn text-sm text-blue-300 hover:underline">Undo</button>
+                `;
                toastContainer.appendChild(toast);

                let undone = false;

                const undoBtn = toast.querySelector('.undo-btn');
                undoBtn.addEventListener('click', async () => {
                    try {
                        const r = await fetch(`/home/restore/${id}`, { method: 'POST', headers: { 'Content-Type': 'application/json' } });
                        const d = await r.json();
                        if (r.ok && d.success) {
                            undone = true;
                            if (card) {
                                card.style.opacity = '';
                                card.style.pointerEvents = '';
                            }
                            toast.remove();
                        } else {
                            alert(d.error || 'Restore failed');
                        }
                    } catch (err) {
                        alert('Restore failed');
                    }
                });

                // After timeout, if not undone, call permanent delete and remove the card from DOM and toast
                const PERMANENT_DELETE_MS = 8000; // 8 seconds to undo
                setTimeout(async () => {
                    if (undone) return;
                    try {
                        await fetch(`/home/delete/permanent/${id}`, { method: 'POST', headers: { 'Content-Type': 'application/json' } });
                    } catch (err) {
                        // Permanent delete failed - we keep the UI consistent by removing card anyway and log to console
                        console.warn('Permanent delete failed for', id, err);
                    }
                    if (card) card.remove();
                    toast.remove();
                }, PERMANENT_DELETE_MS);
            });
        });

        // File name editing functions
        function startEditFileName(fileId) {
            const displayElement = document.getElementById(`filename-display-${fileId}`);
            const editElement = document.getElementById(`filename-edit-${fileId}`);
            const editInput = document.getElementById(`edit-input-${fileId}`);
            
            // Hide display, show edit input
            displayElement.style.display = 'none';
            editElement.classList.remove('hidden');
            
            // Focus and select the input
            editInput.focus();
            editInput.select();
        }

        function cancelEditFileName(fileId) {
            const displayElement = document.getElementById(`filename-display-${fileId}`);
            const editElement = document.getElementById(`filename-edit-${fileId}`);
            
            // Show display, hide edit input
            displayElement.style.display = 'block';
            editElement.classList.add('hidden');
        }

        async function saveFileName(fileId) {
            const editInput = document.getElementById(`edit-input-${fileId}`);
            const displayElement = document.getElementById(`filename-display-${fileId}`);
            const saveBtn = editInput.parentElement.querySelector('button:first-of-type');
            
            const newName = editInput.value.trim();
            
            if (!newName) {
                alert('File name cannot be empty');
                return;
            }
            
            if (newName.length > 255) {
                alert('File name is too long (max 255 characters)');
                return;
            }

            // Show loading state
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const response = await fetch(`/home/update/${fileId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ customName: newName })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    // Update the display
                    displayElement.textContent = data.customName;
                    displayElement.title = data.customName;
                    
                    // Hide edit input
                    cancelEditFileName(fileId);
                    
                    // Show success message
                    alert('File name updated successfully!');
                } else {
                    alert(data.error || 'Failed to update file name');
                }
            } catch (error) {
                console.error('File name update error:', error);
                alert('Failed to update file name. Please try again.');
            } finally {
                // Reset loading state
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save';
            }
        }

        // Add keyboard shortcuts for file name editing
        document.addEventListener('keydown', function(e) {
            if (e.target.id.startsWith('edit-input-')) {
                const fileId = e.target.id.replace('edit-input-', '');
                
                if (e.key === 'Enter') {
                    e.preventDefault();
                    saveFileName(fileId);
                } else if (e.key === 'Escape') {
                    cancelEditFileName(fileId);
                }
            }
        });
    </script>
</body>
</html>